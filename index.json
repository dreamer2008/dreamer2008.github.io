[{"categories":null,"content":" 优秀的面向对象设计众所周知，软件=程序+文档+数据。通常来说，在一个软件系统的生命周期中，软件维护的时间»软件原始开发的时间。注：维护包括bug修复、各种优化和添加新功能。 所以，个人认为，优秀设计的终极目标是提高软件的可维护性(Maintainability)。不考虑可维护性的设计都是耍流氓。 除了这个终极目标之外，还有可复用性，可扩展性（甚至还有健壮性、灵活性，可插拔性等等），这些目标虽然含义不完全相同，但都是为了可维护性服务的。而所有这一切的基础，就是可读性。离开可读性，其他目标要么无法完成，要么代价特别大。它们的关系如下。 需要指出的是，文档的可读性也非常重要。例如，有的API很多指标都不错，就是文档写得乱七八糟，导致使用非常不方便，这就得不偿失了。 ","date":"2017-02-19","objectID":"/posts/tech/architecture/design-principles/:1:0","series":null,"tags":null,"title":"面向对象的设计原则","uri":"/posts/tech/architecture/design-principles/#优秀的面向对象设计"},{"categories":null,"content":" 面向对象的三大特性封装、继承、多态是面向对象的三个基本特性。这是面向对象的语言为了提高可复用性和可维护性而具有的基本特性，也是OO语言相对于非OO语言的优势。 ","date":"2017-02-19","objectID":"/posts/tech/architecture/design-principles/:2:0","series":null,"tags":null,"title":"面向对象的设计原则","uri":"/posts/tech/architecture/design-principles/#面向对象的三大特性"},{"categories":null,"content":" 面向对象设计的基本原则提到面向对象设计(OOD)，很多人会想到设计模式，但真正能把具体的设计模式信手拈来的又有多少呢？另一方面，其实这些设计模式只是具体的招数，不是内功。真正的内功心法更加重要，有了它们，你学习招数将更加顺手，即使不会具体的设计模式也能将软件设计得比较优雅，甚至你还可以在它们的指导下自创一些招数出来，做到“无招胜有招”。 ","date":"2017-02-19","objectID":"/posts/tech/architecture/design-principles/:3:0","series":null,"tags":null,"title":"面向对象的设计原则","uri":"/posts/tech/architecture/design-principles/#面向对象设计的基本原则"},{"categories":null,"content":" SOLID原则[SOLID](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)最早是由俗称「Uncle Bob」的Robert C. Martin提出。他也是\"Clean Code\"这本书的作者。SOLID代表以下5大设计原则。 Single Responsibility Principle(SRP,单一职责原则): 一个类应该有且只有一个去改变它的理由，这意味着一个类应该只有一个职责 Open/Closed Principle(OCP,开闭原则): 对象或实体应该对扩展开放，对修改封闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类 Liskov Substitution Principle(LSP,里氏替换原则): 任何基类可以出现的地方，子类一定可以出现。在对象 x 为类型 T 时 q(x) 成立，那么当 S 是 T 的子类时，对象 y 为类型 S 时 q(y) 也应成立。（即对父类的调用同样适用于子类） Interface Segregation Principle(ISP,接口隔离原则): 使用多个隔离/客户端相关的接口，比使用单个通用接口要好 Dependency Inversion Principle(DIP,依赖反转原则): 实体必须依靠抽象而不是具体实现。它表示高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象 ","date":"2017-02-19","objectID":"/posts/tech/architecture/design-principles/:3:1","series":null,"tags":null,"title":"面向对象的设计原则","uri":"/posts/tech/architecture/design-principles/#solid原则"},{"categories":null,"content":" 其他常用原则除了SOLID原则，还有一些其他原则会经常被提到。 Composite Reuse Principle(CRP,合成复用原则):尽量使用合成/聚合的方式，而不是使用继承 迪米特法则(Law of Demeter) 又叫最少知道原则(Least Knowledge Principle)。一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立 避免重复原则（DRY - Don’t Repeat Yourself） 又叫一次且仅一次（once and only once，简称OAOO)。编程的最基本原则是避免重复。在程序代码中总会有很多结构体，如循环、函数、类等等。一旦你重复某个语句或概念，就会很容易形成一个抽象体 简单原则（Keep It Simple and Stupid） 简单是软件设计的目标，简单的代码占用时间少，漏洞少，并且易于修改 避免过早优化(Avoid Premature Optimization) 除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。 “过早的优化是一切罪恶的根源”——Donald Knuth ","date":"2017-02-19","objectID":"/posts/tech/architecture/design-principles/:3:2","series":null,"tags":null,"title":"面向对象的设计原则","uri":"/posts/tech/architecture/design-principles/#其他常用原则"},{"categories":null,"content":" 我对这些书感兴趣 科学技术（包括IT）方面的人、事、物 经济管理类和职业发展 欧美文化 数学、外语 历史、地理 传记与其他 ","date":"2016-01-23","objectID":"/reading/:1:0","series":null,"tags":null,"title":"我的书单","uri":"/reading/#我对这些书感兴趣"},{"categories":null,"content":" 2016年","date":"2016-01-23","objectID":"/reading/:2:0","series":null,"tags":null,"title":"我的书单","uri":"/reading/#2016年"},{"categories":null,"content":" 科学技术 编写可读代码的艺术 简约之美：软件设计之道 Web全栈工程师的自我修养 程序员必读之软件架构 恰如其分的软件架构 高效程序员的45个习惯：敏捷开发修炼之道(修订版) Effective Java中文版（第2版） 编写高质量代码：改善Java程序的151个建议 重构 改善既有代码的设计 代码整洁之道 ","date":"2016-01-23","objectID":"/reading/:2:1","series":null,"tags":null,"title":"我的书单","uri":"/reading/#科学技术"},{"categories":null,"content":" 经济管理 玩转电商系统 深入剖析智慧电商平台 成为技术领导者：掌握全面解决问题的方法 技术管理之巅：如何从零打造高质效互联网技术团队？ ","date":"2016-01-23","objectID":"/reading/:2:2","series":null,"tags":null,"title":"我的书单","uri":"/reading/#经济管理"},{"categories":null,"content":" 历史传记 搅局的人——匈奴入侵欧洲简史 ","date":"2016-01-23","objectID":"/reading/:2:3","series":null,"tags":null,"title":"我的书单","uri":"/reading/#历史传记"},{"categories":null,"content":" 其他 异类：不一样的成功启示录（新版） 一万小时天才理论 ","date":"2016-01-23","objectID":"/reading/:2:4","series":null,"tags":null,"title":"我的书单","uri":"/reading/#其他"},{"categories":null,"content":" 2015年 以色列人：特殊国土上的普通人 新加坡的那些事儿 我们台湾这些年：1977年至今 ","date":"2016-01-23","objectID":"/reading/:3:0","series":null,"tags":null,"title":"我的书单","uri":"/reading/#2015年"},{"categories":null,"content":" 什么是软件架构(Software Architecture)","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:0:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#什么是软件架构software-architecture"},{"categories":null,"content":" 定义 软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。（原文：(https://zh.wikipedia.org/wiki/软件架构)） ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:1:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#定义"},{"categories":null,"content":" 起源1960年代，Dijkstra（别告诉我你不知道他是谁）等人就已提出这个概念。1990年代以来，由于Rational和Microsoft内部的相关活动，逐渐开始流行起来。 ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:2:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#起源"},{"categories":null,"content":" 什么是架构师(Architect)","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:0:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#什么是架构师architect"},{"categories":null,"content":" 系统架构师(System Architect)其实，系统架构师分为很多种，企业架构师、软件架构师、硬件架构师、网络架构师、解决方案架构师等等。更多请参见：https://en.wikipedia.org/wiki/Software_architect. 当然本文的重点是关注软件架构师，尤其是互联网软件架构师 ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:1:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#系统架构师system-architect"},{"categories":null,"content":" 软件架构师软件架构师当然就是负责设计上面所说的软件架构的人。（这不废话嘛。呵呵） ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:2:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#软件架构师"},{"categories":null,"content":" 我对架构师的理解","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:0:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#我对架构师的理解"},{"categories":null,"content":" 工作职责 系统架构师，是技术的长期演进的远见，和主持系统各个部分的集成整合。职责是架构可否顺利实施、对核心部分质量的承担和框架搭建。 (原文：https://zh.wikipedia.org/wiki/系统架构师) ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:1:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#工作职责"},{"categories":null,"content":" 任职要求0、架构师要有良好的沟通能力，跟技术团队、产品团队、业务团队等等都有良好的沟通 1、知识、技能方面 1）架构师必须是优秀的程序员，必须有足够的设计经验、编程经验（个人认为至少3年，“天才”可以例外） 2）架构师需要有广博的知识面，深刻理解各种原理。通晓软硬件、操作系统、网络等各种知识 2、思维方式、能力方面 1）抽象思维能力、逻辑推理能力、快速理解产品需求的能力 2）全局观、系统性思维 系统性思维、要理解整个系统的本质和关键点（重点、难点、容易变化的点、潜在的风险、最大的挑战和瓶颈） 3）要有技术前瞻性，要拥抱变化，但不要完美主义 不要企图一开始就设计一个完美的架构。优先考虑的应该是用较低的成本满足当前需求，并且保证一定的前瞻性就够了 3、演讲和分享 1）多在内部分享，帮助团队提升和成长 2）善于走出去，多分享交流，不断为团队注入新鲜血液，同时提升自己的水平和提高个人的影响力 ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:2:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#任职要求"},{"categories":null,"content":" 首席架构师(CAO,Chief Architecture Officer)恩。等你先成为一名合格的架构师再说吧。CAO这个缩写也是醉了 ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:0:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#首席架构师caochief-architecture-officer"},{"categories":null,"content":" 更多参考做人、做事，做架构师——架构师能力模型解析 软件架构师的工作 ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:1:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#更多参考"},{"categories":null,"content":" 结语So, for me, at this moment, I got a long way to go. Fighting! ","date":"2016-01-17","objectID":"/posts/tech/architecture/my-view-on-architecture/:0:0","series":null,"tags":["architecture","OOD"],"title":"架构师之我见","uri":"/posts/tech/architecture/my-view-on-architecture/#结语"},{"categories":null,"content":" About Software Engineer. A part-time Senior Community Editor @InfoQ Industry: Internet/e-commerce Programming language： Java(7+ years)/JavaScript. Interested in Python/Go Human/Natural language: Chinese/English. Also Interested in French, German, Spanish…Determined to be a polyglot Specialization： backend/server-side/full-stack。Interested in AI Hobbies： Travel, Photography, Movies, Cycling(Cycling in Beijing), Hiking My Channel: https://space.bilibili.com/396377427 Dislikes： jobs without work-life balance, bony fish， smelly food, animal organs ","date":"2015-04-19","objectID":"/about/:1:0","series":null,"tags":null,"title":"About Me","uri":"/about/#about"},{"categories":null,"content":" Booklist Book I read before 2020 ","date":"2015-04-19","objectID":"/about/:2:0","series":null,"tags":null,"title":"About Me","uri":"/about/#booklist"},{"categories":null,"content":" NOTE: This is just a default demo. For hexo, please refer to my blog here. Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ","date":"2015-04-18","objectID":"/posts/misc/hello-world/:0:0","series":null,"tags":["misc"],"title":"Hello World","uri":"/posts/misc/hello-world/#"},{"categories":null,"content":" Quick Start","date":"2015-04-18","objectID":"/posts/misc/hello-world/:1:0","series":null,"tags":["misc"],"title":"Hello World","uri":"/posts/misc/hello-world/#quick-start"},{"categories":null,"content":" Create a new post$ hexo new \"My New Post\" More info: Writing ","date":"2015-04-18","objectID":"/posts/misc/hello-world/:1:1","series":null,"tags":["misc"],"title":"Hello World","uri":"/posts/misc/hello-world/#create-a-new-post"},{"categories":null,"content":" Run server$ hexo server More info: Server ","date":"2015-04-18","objectID":"/posts/misc/hello-world/:1:2","series":null,"tags":["misc"],"title":"Hello World","uri":"/posts/misc/hello-world/#run-server"},{"categories":null,"content":" Generate static files$ hexo generate More info: Generating ","date":"2015-04-18","objectID":"/posts/misc/hello-world/:1:3","series":null,"tags":["misc"],"title":"Hello World","uri":"/posts/misc/hello-world/#generate-static-files"},{"categories":null,"content":" Deploy to remote sites$ hexo deploy More info: Deployment ","date":"2015-04-18","objectID":"/posts/misc/hello-world/:1:4","series":null,"tags":["misc"],"title":"Hello World","uri":"/posts/misc/hello-world/#deploy-to-remote-sites"}]